// Code generated by Modus. DO NOT EDIT.

package main

import (
	"unsafe"
	"github.com/hypermodeinc/modus/sdk/go/pkg/neo4j"
)

var __pins = make(map[unsafe.Pointer]int)

//go:export __unpin
func __unpin(p unsafe.Pointer) {
	n := __pins[p]
	if n == 1 {
		delete(__pins, p)
	} else {
		__pins[p] = n - 1
	}
}

//go:export __new
func __new(id int) unsafe.Pointer {
	switch id {
	case 3:
		o := new(neo4j.EagerResult)
		p := unsafe.Pointer(o)
		__pins[p]++
		return p
	case 4:
		o := new(neo4j.Record)
		p := unsafe.Pointer(o)
		__pins[p]++
		return p
	case 5:
		o := new(string)
		p := unsafe.Pointer(o)
		__pins[p]++
		return p
	case 6:
		o := new([]*neo4j.Record)
		p := unsafe.Pointer(o)
		__pins[p]++
		return p
	case 7:
		o := new([]string)
		p := unsafe.Pointer(o)
		__pins[p]++
		return p
	case 8:
		o := new(Symptom)
		p := unsafe.Pointer(o)
		__pins[p]++
		return p
	case 9:
		o := new(neo4j.EagerResult)
		p := unsafe.Pointer(o)
		__pins[p]++
		return p
	case 10:
		o := new(neo4j.Record)
		p := unsafe.Pointer(o)
		__pins[p]++
		return p
	}

	return nil
}

//go:export __make
func __make(id, size int) unsafe.Pointer {
	switch id {
	case 1:
		o := make([]byte, size)
		p := unsafe.Pointer(&o)
		__pins[p]++
		return p
	case 2:
		o := string(make([]byte, size))
		p := unsafe.Pointer(&o)
		__pins[p]++
		return p
	case 6:
		o := make([]*neo4j.Record, size)
		p := unsafe.Pointer(&o)
		__pins[p]++
		return p
	case 7:
		o := make([]string, size)
		p := unsafe.Pointer(&o)
		__pins[p]++
		return p
	}

	return nil
}
